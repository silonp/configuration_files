" Don't try to be vi compatible.
set nocompatible

" Helps force plugins to load correctly when it is turned back on below.
filetype off

" Load plugins here [VIM < 8] (pathogen or vundle):
packadd termdebug

" Turn on syntax highlighting.
syntax on

" For plugins to load correctly.
filetype plugin indent on

" Pick a leader key.
let mapleader="\\"

" No modeline at the end of the file (ts=4 ...).
set modelines=0

" Show line numbers.
set number

" Visual Bell OFF.
set t_vb=

" Encoding.
set encoding=utf-8

" Do not wrap lines.
set nowrap

" Use full width of a screen.
set textwidth=0

" Format t=text c=comment q=paragraph(with gq).
set formatoptions=tcq

" Width of a <TAB>.
set tabstop=4

" Auto-indent width.
set shiftwidth=4

" Width on <TAB> <BS> press.
set softtabstop=4

" Spaces for <TAB>.
set expandtab

" Round the indentation to the nearest multiple of “shiftwidth”.
set noshiftround

" Offset lines UP and DOWN when searching.
set scrolloff=10

" Allow backspacing over indention, line breaks and insertion start.
set backspace=indent,eol,start

" Disable swap files.
set noswapfile

" Add < and > to pair tags, use % to jump b/w.
set matchpairs+=<:>

" Fast terminal.
set ttyfast

" Mouse in all modes.
set mouse=a

" Always show status line.
set laststatus=2

" Status line.
set statusline=
set statusline+=%#DiffAdd#%{(mode()=='n')?'\ \ NORMAL\ ':''}        " GREEN
set statusline+=%#DiffDelete#%{(mode()=='i')?'\ \ INSERT\ ':''}     " RED
set statusline+=%#DiffChange#%{(mode()=='r')?'\ \ RPLACE\ ':''}     " AQUA
set statusline+=%#DiffText#%{(mode()=='v')?'\ \ VISUAL\ ':''}       " YELLOW
set statusline+=%#Cursor#                   " Color
set statusline+=\ %n\                       " Buffer no.
set statusline+=%#Visual#                   " Color
set statusline+=%{&paste?'\ PASTE\ ':''}    " :set paste ON
set statusline+=%{&spell?'\ SPELL\ ':''}    " :set spell ON
set statusline+=%#CursorIM#                 " Color
set statusline+=%R                          " Read-only flag (RO)
set statusline+=%M                          " Modified [+] flag
set statusline+=%#Cursor#                   " Color
set statusline+=%#CursorLine#               " Color
set statusline+=\ %f\                       " Full file name
set statusline+=%=                          " Right align
set statusline+=%#CursorLine#               " Color
set statusline+=\ %Y\                       " File type
set statusline+=%#CursorIM#                 " Color
set statusline+=\ %3l:%-2c\                 " Line + Column
set statusline+=%#Cursor#                   " Color
set statusline+=\ %3p%%\                    " Percentage

" Show command on last line.
set showcmd

" Don't show mode on last line.
set noshowmode

" User mappings timeout (e.g. <Leader><X>).
set timeoutlen=500

" Escape sequences timeout (check with TMUX escape-time option).
set ttimeoutlen=10

" All search is highlighted.
set hlsearch

" Highlight search as typing.
set incsearch

" Ignore case unless uppercase letter is typed (smartcase).
set ignorecase
set smartcase

" Show paired brace for 10 seconds.
set showmatch
set matchtime=1

" Menu on <TAB> completion of commands.
set wildmenu

" Where to look for files:
set path+=~/comboard/**

" Where not to look for files:
set wildignore+=**/build/**
set wildignore+=**/build_*/**
set wildignore+=**/tmp/**

" Specific for EB Corbos projects:
set wildignore+=**/install/**
set wildignore+=**/rootfs/**
set wildignore+=**/studio/**
set wildignore+=**/Unit_Test/**

" Default to not read-only in vimdiff.
set noro

" Default spelling language.
set spell spelllang=en_us
set nospell

" Allow hidden buffers (that are not liked to file yet).
set hidden

" Relative line numbers.
set relativenumber

" GRUVBOX settings:
" -----------------
set background=dark
colorscheme gruvbox

" All alterations to color should be done after the scheme is loaded!
highlight clear SpellBad
highlight SpellBad cterm=underline ctermfg=white
highlight LineNr ctermfg=yellow
highlight LineNrAbove ctermfg=darkgray
highlight LineNrBelow ctermfg=darkgray

" NERDTree settings:
" ------------------
let g:NERDTreeShowHidden=1
let g:NERDTreeQuitOnOpen=1

" CtrlP settings:
" ---------------
let g:ctrlp_match_window ='min:1,max:20'
let g:ctrlp_regexp=1
let g:ctrlp_show_hidden=1
let g:ctrlp_working_path_mode=0

" CtrlP uses these 3 highlight groups.
highlight CtrlPMode1 cterm=NONE ctermfg=180 ctermbg=239
highlight CtrlPMode2 cterm=NONE ctermfg=180 ctermbg=239
highlight CtrlPStats cterm=NONE ctermfg=180 ctermbg=239

" ALE settings:
" -------------
let g:ale_linters={
\   'c': ['clangtidy'],
\   'cmake': ['cmakelint'],
\   'cpp': ['clangtidy', 'clangd'],
\   'python': ['flake8'],
\}

let g:ale_fixers={
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'c': ['clang-format'],
\   'cmake': ['cmakeformat', 'remove_trailing_lines', 'trim_whitespace'],
\   'cpp': ['clang-format'],
\   'python': ['autopep8'],
\}

let g:ale_fix_on_save=0

let g:ale_completion_enabled=1
let g:ale_completion_autoimport=1

" Use ALE's function for manual omnicompletion:
set omnifunc=ale#completion#OmniFunc

" A list of directory names to be used when searching upwards from cpp files
" to discover compilation databases with (compile_commands.json).
let g:ale_c_build_dir_names=['build', 'build_test', 'build_unittest', 'build_unittests', 'build_ScriptingService']

let g:ale_python_flake8_options='--max-line-length 120'
let g:ale_python_autopep8_options='--max-line-length 120'

let g:ale_c_parse_compile_commands=1
let g:ale_c_parse_makefile=0

" Options are in .clang-format.
let g:ale_c_clangformat_executable='clang-format-15'
let g:ale_c_clangformat_use_local_file=1

" Checks are in .clang-tidy.
let g:ale_cpp_clangtidy_checks=[]
let g:ale_cpp_clangtidy_executable='clang-tidy-15'
let g:ale_c_clangtidy_fix_errors=1

let g:ale_cmake_cmakelint_executable='cmake-lint'
let g:ale_cmake_cmakelint_options='--tab-size 4'
let g:ale_cmake_cmakelint_options.=' --line-width 120'

let g:ale_cmake_cmakeformat_executable='cmake-format'
let g:ale_cmake_cmakeformat_options=''
let g:ale_cmake_cmakeformat_options.=' --tab-size 4'
let g:ale_cmake_cmakeformat_options.=' --dangle-parens True'
let g:ale_cmake_cmakeformat_options.=' --line-width 100'
" Disable cmake_format:
let g:ale_cmake_cmakeformat_options.=' --disable'

" Clangd is a LSP server:
let g:ale_cpp_clangd_executable='clangd-15'

" Indexing options:
" let g:ale_cpp_clangd_options='--query-driver=/home/dev/ara/eb/adaptivecore/sdk/custom/qemu-arm64/2.9.0/sysroots/x86_64-wrlinuxsdk-linux/usr/bin/aarch64-wrs-linux/aarch64-wrs-linux-g++'
let g:ale_cpp_clangd_options='--query-driver=/home/dev/ara/eb/adaptivecore/sdk/eblinux/qemu-x86/2.11.0-19-03/sysroots/x86_64-pokysdk-linux/usr/bin/x86_64-poky-linux/x86_64-poky-linux-g++'
let g:ale_cpp_clangd_options.=' --background-index'
let g:ale_cpp_clangd_options.=' --completion-style=detailed'
let g:ale_cpp_clangd_options.=' --cross-file-rename'
let g:ale_cpp_clangd_options.=' --limit-results=10'
let g:ale_cpp_clangd_options.=' --header-insertion=never'

" HEADER GUARDS
let g:headerguard_use_cpp_comments=1

" VIM TOC settings:
" -----------------
let g:vmt_auto_update_on_save = 0
let g:vmt_fence_text = 'markdown-toc start'
let g:vmt_fence_closing_text = 'markdown-toc end'
let g:vmt_fence_hidden_markdown_style = 'GFM'

" Recognize Jenkinsfile as groovy script.
" This way also auto-indentation works.
au BufNewFile,BufRead Jenkinsfile setf groovy
au BufNewFile,BufRead Dockerfile* setf dockerfile

" +--------+
" |COMMANDS|
" +--------+

" Run ALE fixers with :Fm or :fm.
command Fm :ALEFix
cnoreabbrev fm Fm

" Save file with sudo:
command! -nargs=0 W :w !sudo tee % >/dev/null

" +--------+
" |MAPPINGS|
" +--------+

" Alternative <ESC>.
" Ctrl+c works in command mode!
inoremap C-C <ESC>

" END and HOME keys (all modes).
map <ESC>[H <HOME>
map <ESC>[F <END>
imap <ESC>[H <HOME>
imap <ESC>[F <END>

" \v - very magic i.e. allow regex search.
nnoremap / /\v
vnoremap / /\v

" Follow the text lines not physical lines.
nnoremap j gj
nnoremap k gk

nmap <F2> <Plug>(ale_fix)
nmap <F3> <Plug>(ale_go_to_definition_in_tab)
nmap <F4> <Plug>(ale_go_to_definition)
nmap <F5> :HeaderguardAdd<CR>

" In NERDTree:
"   t = open in new tab.
"   s = open in new vertical split.
nnoremap <C-N> :NERDTreeToggle<CR>
nnoremap <C-M> :NERDTreeFind<CR>

" Spell check toggle with <F7>.
nnoremap <F7> :setlocal spell!<CR>

" Next buffer.
silent! nunmap <S-H><CR>
nnoremap <S-H> :bn<CR>

" Previous buffer.
silent! nunmap <S-L><CR>
nnoremap <S-L> :bp<CR>

" Next and Previous ALE error:
nnoremap ]e :ALENext<CR>
nnoremap [e :ALEPrevious<CR>

" +-------------------+
" |LEADER KEY MAPPINGS|
" +-------------------+
" Note <SILENT> does not work, use <silent>.

" Clear search register.
map <silent> <Leader><Space> :let @/=''<CR>

" Visualize tabs(.) and eol(¬) with <Leader>n.
set listchars=tab:▸\ ,eol:¬
map <Leader>n :set list!<CR>

" <Leader>+N for tab selection (all modes).
noremap <Leader>1 1gt
noremap <Leader>2 2gt
noremap <Leader>3 3gt
noremap <Leader>4 4gt
noremap <Leader>5 5gt
noremap <Leader>6 6gt
noremap <Leader>7 7gt
noremap <Leader>8 8gt
noremap <Leader>9 9gt

" List buffers and let the user to pick.
nnoremap <Leader>b :ls<CR>:b<Space>

" +---------+
" |FUNCTIONS|
" +---------+

" Adds numbers to tabs:
function! MyTabLabel(n)
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    let string = fnamemodify(bufname(buflist[winnr - 1]), ':t')
    return empty(string) ? '[unnamed]' : string
endfunction!

function! MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif

        let s .= ' '. (i+1) . ' '
        let s .= ' %{MyTabLabel(' . (i + 1) . ')} '

        if i+1 < tabpagenr('$')
            let s .= ' |'
        endif
    endfor
    return s
endfunction!

" Use the custom tabline:
set tabline=%!MyTabLine()

" Custom .h/.hpp header guards:
" _PARENTDIR_FILENAME__
function! g:HeaderguardName()
    let s = "_" . toupper(expand('%:p:h:t:gs/[^0-9a-zA-Z_]/_/g'))
        \ . "_" . toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
        \ . "_"
    return s
endfunction
