" Don't try to be vi compatible.
set nocompatible

" Helps force plugins to load correctly when it is turned back on below.
filetype off

" Load plugins here [VIM < 8] (pathogen or vundle):

" Turn on syntax highlighting.
syntax on

" For plugins to load correctly.
filetype plugin indent on

" Pick a leader key.
let mapleader="\\"

" No modeline at the end of the file (ts=4 ...).
set modelines=0

" Show line numbers.
set number

" Visual Bell OFF.
set t_vb=

" Encoding.
set encoding=utf-8

" Do not wrap lines.
set nowrap

" Use full width of a screen.
set textwidth=0

" Format t=text c=comment q=paragraph(with gq).
set formatoptions=tcq

" Width of a <TAB>.
set tabstop=4

" Auto-indent width.
set shiftwidth=4

" Width on <TAB> <BS> press.
set softtabstop=4

" Spaces for <TAB>.
set expandtab

" Round the indentation to the nearest multiple of “shiftwidth”.
set noshiftround

" Offset lines UP and DOWN when searching.
set scrolloff=10

" Allow backspacing over indention, line breaks and insertion start.
set backspace=indent,eol,start

" Disable swap files.
set noswapfile

" Add < and > to pair tags, use % to jump b/w.
set matchpairs+=<:>

" Fast terminal.
set ttyfast

" Mouse in all modes.
set mouse=a

" Always show status line.
set laststatus=2

" Status line.
set statusline=
set statusline+=%#DiffAdd#%{(mode()=='n')?'\ \ NORMAL\ ':''}        " GREEN
set statusline+=%#DiffDelete#%{(mode()=='i')?'\ \ INSERT\ ':''}     " RED
set statusline+=%#DiffChange#%{(mode()=='r')?'\ \ RPLACE\ ':''}     " AQUA
set statusline+=%#DiffText#%{(mode()=='v')?'\ \ VISUAL\ ':''}       " YELLOW
set statusline+=%#Cursor#                   " Color
set statusline+=\ %n\                       " Buffer no.
set statusline+=%#Visual#                   " Color
set statusline+=%{&paste?'\ PASTE\ ':''}    " :set paste ON
set statusline+=%{&spell?'\ SPELL\ ':''}	" :set spell ON
set statusline+=%#CursorIM#                 " Color
set statusline+=%R                          " Read-only flag (RO)
set statusline+=%M                          " Modified [+] flag
set statusline+=%#Cursor#                   " Color
set statusline+=%#CursorLine#               " Color
set statusline+=\ %f\                       " Full file name
set statusline+=%=                          " Right align
set statusline+=%#CursorLine#               " Color
set statusline+=\ %Y\                       " File type
set statusline+=%#CursorIM#                 " Color
set statusline+=\ %3l:%-2c\                 " Line + Column
set statusline+=%#Cursor#                   " Color
set statusline+=\ %3p%%\                    " Percentage

" Show command on last line.
set showcmd

" Don't show mode on last line.
set noshowmode

" User mappings timeout (e.g. <Leader><X>).
set timeoutlen=500

" Escape sequences timeout (check with TMUX escape-time option).
set ttimeoutlen=10

" All search is highlighted.
set hlsearch

" Highlight search as typing.
set incsearch

" Ignore case unless uppercase letter is typed (smartcase).
set ignorecase
set smartcase

" Show paired brace for 10 seconds.
set showmatch
set matchtime=1

" Search PATH:
set path+=~/comboard

" Menu on <TAB> completion of commands.
set wildmenu

" Don't look into build directories.
set wildignore+=**/build/**
set wildignore+=**/tmp/**

" Default to not read-only in vimdiff.
set noro

" Default spelling language.
set spell spelllang=en_us
set nospell

" Allow hidden buffers (that are not liked to file yet).
set hidden

" GRUVBOX :-)
set background=dark
colorscheme gruvbox

" All alterations to color should be done after the scheme is loaded!
highlight clear SpellBad
highlight SpellBad cterm=underline ctermfg=white

" CtrlP uses these 3 highlight groups.
highlight CtrlPMode1 cterm=NONE ctermfg=230 ctermbg=239
highlight CtrlPMode2 cterm=NONE ctermfg=230 ctermbg=239
highlight CtrlPStats cterm=NONE ctermfg=230 ctermbg=239

" NERDTree settings.
let g:NERDTreeShowHidden=1
let g:NERDTreeQuitOnOpen=1

" CtrlP settings.
" r = Ancestor GIT directory.
" a = Subdirectory of current file.
let g:ctrlp_working_path_mode ='ra'
let g:ctrlp_show_hidden=1

" +--------+
" |MAPPINGS|
" +--------+

" Alternative <ESC>.
" Ctrl+c works in command mode!
inoremap C-C <ESC>

" END and HOME keys (all modes).
map <ESC>[H <HOME>
map <ESC>[F <END>
imap <ESC>[H <HOME>
imap <ESC>[F <END>

" \v - very magic i.e. allow regex search.
nnoremap / /\v
vnoremap / /\v

" Follow the text lines not physical lines.
nnoremap j gj
nnoremap k gk

" In NERDTree:
"   t = open in new tab
"   s = open in new vertical split
nnoremap <F3> :NERDTreeToggle<CR>
nnoremap <F4> :NERDTreeFind<CR>

" Spell check toggle with <F7>.
nnoremap <F7> :setlocal spell!<CR>

" Next buffer.
silent! nunmap <S-H><CR>
nnoremap <S-H> :bn<CR>

" Previous buffer.
silent! nunmap <S-L><CR>
nnoremap <S-L> :bp<CR>

" +-------------------+
" |LEADER KEY MAPPINGS|
" +-------------------+
" Note <SILENT> does not work, use <silent>.

" Clear search register.
map <silent> <Leader><Space> :let @/=''<CR>

" Visualize tabs(.) and eol(¬) with <Leader>n.
set listchars=tab:▸\ ,eol:¬
map <Leader>n :set list!<CR>

" <Leader>+N for tab selection (all modes).
noremap <Leader>1 1gt
noremap <Leader>2 2gt
noremap <Leader>3 3gt
noremap <Leader>4 4gt
noremap <Leader>5 5gt
noremap <Leader>6 6gt
noremap <Leader>7 7gt
noremap <Leader>8 8gt
noremap <Leader>9 9gt

" List buffers and let the user to pick.
nnoremap <Leader>b :ls<CR>:b<Space>

" +---------+
" |FUNCTIONS|
" +---------+

" Save the cursor position and restore last searched string (@/).
function! <SID>StripTrailingWhitespaces()
    let _s=@/
    let l = line(".")
    let c = col(".")
    " e = No error if not matched
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

" Delete trailing white spaces on F2.
nnoremap <silent> <F2> :call <SID>StripTrailingWhitespaces()<CR>
