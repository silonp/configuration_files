" Don't try to be vi compatible
set nocompatible

" Helps force plugins to load correctly when it is turned back on below
filetype off

" Load pluagins here (pathogen or vundle)

" Turn on syntax highlighting
syntax on

" For plugins to load correctly
filetype plugin indent on

" Pick a leader key
let mapleader="\\"

" No modeline at the end of the file (ts=4 ...)
set modelines=0

" Show line numbers
set number

" Visualbell OFF
set t_vb=

" Encoding
set encoding=utf-8

" Do not wrap lines
set nowrap

" Use full width of a screen
set textwidth=0

" Format t=text c=comment q=paragraph(with gq)
set formatoptions=tcq

" Width of a <TAB>
set tabstop=4

" Auto-indent width
set shiftwidth=4

" Width on <TAB> <BS> press
set softtabstop=4

" Spaces for <TAB>
set expandtab

" Round the indentation to the nearest multiple of “shiftwidth”
set noshiftround

" Offset lines UP and DOWN when searching
set scrolloff=10

" Allow backspacing over indention, line breaks and insertion start
set backspace=indent,eol,start

" Disable swap files
set noswapfile

" Add < and > to pair tags, use % to jump b/w
set matchpairs+=<:>

" Follow the text lines not physical lines
nnoremap j gj
nnoremap k gk

" Fast terminal
set ttyfast

" Mouse in all modes
set mouse=a

" Always show status line
set laststatus=2

" Status line
set statusline=
set statusline+=%#DiffAdd#%{(mode()=='n')?'\ \ NORMAL\ ':''}
set statusline+=%#DiffChange#%{(mode()=='i')?'\ \ INSERT\ ':''}
set statusline+=%#DiffDelete#%{(mode()=='r')?'\ \ RPLACE\ ':''}
set statusline+=%#Cursor#%{(mode()=='v')?'\ \ VISUAL\ ':''}
set statusline+=\ %n\                       " Buffer number
set statusline+=%#Visual#                   " Colour
set statusline+=%{&paste?'\ PASTE\ ':''}
set statusline+=%{&spell?'\ SPELL\ ':''}
set statusline+=%#CursorIM#                 " Colour
set statusline+=%R                          " Readonly flag
set statusline+=%M                          " Modified [+] flag
set statusline+=%#Cursor#                   " Colour
set statusline+=%#CursorLine#               " Colour
set statusline+=\ %f\                       " File name
set statusline+=%=                          " Right align
set statusline+=%#CursorLine#               " Colour
set statusline+=\ %Y\                       " File type
set statusline+=%#CursorIM#                 " Colour
set statusline+=\ %3l:%-2c\                 " Line + Column
set statusline+=%#Cursor#                   " Colour
set statusline+=\ %3p%%\                    " Percentage

" Show command on last line
set showcmd

" Don't show mode on last line
set noshowmode

" User mappings timeout (e.g. <leader><X>)
set timeoutlen=1000

" Escape sequences timeout (check with TMUX escape-time option)
set ttimeoutlen=10

" \v - very magic i.e. allow regex search
nnoremap / /\v
vnoremap / /\v

" All search is highlighted
set hlsearch

" Highlight search as typing
set incsearch

" Ignore case unless uppercase letter is typed (smartcase)
set ignorecase
set smartcase

" Show paired brace for 10 seconds
set showmatch
set matchtime=1

" All sub-directories when searching (:find)
set path+=**

" Menu ON
set wildmenu

" Don't look into build directories
set wildignore+=**/build/**

" Default to not read-only in vimdiff
set noro

" Clear search
map <leader><space> :let @/=''<CR>

" Visualize tabs(.) and eol(¬) with <leader>n
set listchars=tab:▸\ ,eol:¬
map <leader>n :set list!<CR>

" END and HOME keys (all modes)
map <esc>[H <home>
map <esc>[F <end>

" Color scheme
set background=dark
colorscheme gruvbox

" Toggle NERDTree on F3
" In NERDTree:
"   t = open in new tab
"   s = open in new vertical split
nnoremap <F3> :NERDTreeToggle<CR>

" <leader>+N for tab selection (all modes)
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt

" Save the cursor position and resore last searched strin (@/)
function! <SID>StripTrailingWhitespaces()
    let _s=@/
    let l = line(".")
    let c = col(".")
    " e = No error if not matched
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

" Delete trailing whitespaces on F2
nnoremap <silent> <F2> :call <SID>StripTrailingWhitespaces()<CR>
